#include <iostream>
#include <cmath>
using std::cout;
using std::cin;
using std::endl;
int fib(int r);
int pow(int p, int e);
int tri(int n);
void drawTri(int n);
int gcd(int a, int b);


int main(){
	//Fib Variables
	int response = 0;
	
	cout << "Which number of the Fibonnaci Sequence do you want? \n(For this program, we are NOT including 0 as a part of the sequence.)\n";
	cin >> response;
	cout << "That number is " << fib(response) << endl; //original call

	//Power Variables
	int number = 0;
	int power = 0;

	cout << "Moving on to power. What number do you want raised to what power\n(use format [number space power])" << endl;
	cin >>  number >> power;
	cout << "That comes out to " << pow(number, power) << endl; //original call
	
	//Tri Variables
	int triNum = 0;
	
	cout << "Moving on to tri. Which triangular number do you want?\n";
	cin >> triNum;
	cout << "That comes out to " << tri(triNum) << endl << "Your triangle looks something like this:\n"; //original call
	drawTri(triNum);  // random function I wanted to do, because why not?
	
	//Gcd Variables
	int gcdNum1;
	int gcdNum2;

	cout << "Finally, moving on to gcd. Please enter the two numbers you want \n to find the greatest common denominator of. \n(Use formate [number1 space number2]) \n";
	cin >> gcdNum1 >> gcdNum2;
	if (gcdNum1 < 0 || gcdNum2 < 0){
		gcdNum1 = abs(gcdNum1);
		gcdNum2 = abs(gcdNum2);
	}
	cout << "The greatest common denominator between these two numbers is:\n" << gcd(gcdNum1, gcdNum2) << endl; // original call

	char repeat;
	cout << "Would you like to run this program again? \nRespond Y for yes, or any other character for no." << endl;
	cin >> repeat;
	repeat = tolower(repeat);
	if (repeat == 'y')
		main(); //recursively calling main, because I wanna :P.
	return 0;
}

int fib(int n){
	if (n == 1)
		return 1;
	if (n == 2)
		return 1;
	return fib(n - 1) + fib(n - 2); // recursive call
}


int pow(int base, int exp){
	--exp;
	if (exp == 0)
		return base;
	return base * pow(base, exp);  //recursive call
} 

int tri(int n){
	if (n == 0)
		return 0;
	return n + tri(n - 1); // recursive call
}

void drawTri(int n){
	for (int i = 1; i <= n; i++){
		for (int j = 0; j < i; j++)
			cout << "* ";
		cout << endl;
	}
}

int gcd(int a, int b){
	if (a < 0 || b < 0){
		a = abs(a);
		b = abs(b);
	}
	if (a == 0)
		return b;
	if (b == 0)
		return a;
	if (b > a)
		return gcd(a, b - a);
	if (a > b)
		return gcd(a - b, b);
}
